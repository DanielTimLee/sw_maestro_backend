{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from sklearn.externals import joblib\n",
    "import nltk\n",
    "import re\n",
    "from konlpy.tag import Twitter\n",
    "\n",
    "twitter = Twitter()\n",
    "clf = joblib.load('classify_8886j.model')\n",
    "cate_dict = joblib.load('cate_dict_8886j.dat')\n",
    "vectorizer = joblib.load('vectorizer_8886j.dat')\n",
    "cate_id_name_dict = dict([(v,k)for k,v in cate_dict.items()])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def tagging(result):\n",
    "    for idx,data in enumerate(result):\n",
    "        if len(data)==1:\n",
    "            #if not data.isnumeric():\n",
    "            result[idx]=data+\"_\"\n",
    "        \n",
    "    return \" \".join(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from flask import Flask, request,jsonify\n",
    "from threading import  Condition\n",
    "import time\n",
    "_CONDITION = Condition()\n",
    "app = Flask(__name__)\n",
    "\n",
    "i=0   \n",
    "@app.route('/classify')\n",
    "def classify():\n",
    "    global i\n",
    "    i+=1\n",
    "    \n",
    "    #print (\"classify called\")\n",
    "    \n",
    "    #img = request.args.get('img')\n",
    "    name = request.args.get('name')\n",
    "    \n",
    "    r1 = re.compile(\"(\\d{1}/|최대|)(\\d{2}|\\d{1})만원( |)(최대|적립|이상| |)(↑| |)(구매고객|구매시|무료배송 및 사은품| |)( |)(최대|적립|이상| |)(\\d{1}개|(.*)증정| |)((.*)증정| |)\")\n",
    "    name=r1.sub(\" \",name)\n",
    " \n",
    "    r2 = re.compile(\"(시중가|기존가|정상가|최초가|)(:|)(\\d{7}|\\d{6}|\\d{5}|((\\d{3}|\\d{2})( |,|)\\d{3})|\\d{4}|\\d{3}|\\d{2}|\\d{1})원\")\n",
    "    name=r2.sub(\" \",name)\n",
    "    \n",
    "    r3 = re.compile(\"(AK플라자|AK PLAZA|AK몰|AK유아동|AKMALL|_AK|AK수원점)\")\n",
    "    name=r3.sub(\" \",name)\n",
    " \n",
    "    r4 = re.compile(\"(\\D{2}|)( |)백화점( |)((.*)관|)\")\n",
    "    name=r4.sub(\" \",name)\n",
    "   \n",
    "    r5 = re.compile(\"(\\d{2}|\\d{1}|)(균일가|진열|시즌|%|)(마지막|한정|파격|특가|A|대박|)(%| |)세일(할인|)\")\n",
    "    name=r5.sub(\" \",name)\n",
    " \n",
    "    r6 = re.compile(\"(\\d{2}.|)(\\d{3}|\\d{2}|\\d{1})%( |)(즉시할인|할인|OFF|Sale|sale|)(쿠폰|)(~|)((.*)일까지|)\")\n",
    "    name=r6.sub(\" \",name)\n",
    "\n",
    "    r7 = re.compile(\"카드(\\D{3,5})(\\d{2}|\\d{1})\\/(\\d{2}|\\d{1})(\\~|)((\\d{2}|\\d{1})\\/(\\d{2}|\\d{1})|)\")\n",
    "    name=r7.sub(\"카드\",name)\n",
    "    \n",
    "    r8 = re.compile(\"(\\.\\.\\.\\.|\\.\\.\\.|\\.\\.| : | :|: |::|\\((I|C|M|F|E|주)\\))\")\n",
    "    name=r8.sub(\" \",name)\n",
    "    \n",
    "    r9 = re.compile(\"(정성으로|유선문의|부드럽게|)( |)(작동됩|안됩|됩|팝|판매합|배송하겠습| 배송합|합|부탁드립|드립|바랍|다하겠습|입|)니다(\\.|\\!|)\")\n",
    "    name=r9.sub(\" \",name)\n",
    "    \n",
    "    r10 = re.compile(\"(이|)( |)(가격이|샵이|고객만족을위해|)( |)최선(이다|입니다|을|)( |)(다하겠습니다|)\")\n",
    "    name=r10.sub(\" \",name)\n",
    "    \n",
    "    \n",
    "    \"\"\"\n",
    "    'Free Shipping','Free shipping','Freeshipping',\"new \",\"NEW \",\"New \",\n",
    "    \\b [MB|TB|KB|GHz|mhz]\\b\n",
    "    \"\"\"\n",
    "\n",
    "    brand=[\"Satechi\",\"Logitech\",\"INTEL\",\"Intel\",\"IBM\",\"HP\",\"Shure\",\"Dell\"]\n",
    "    \n",
    "    for word in brand :\n",
    "        name=name.replace(word, \" \"+word+\" \")    \n",
    "\n",
    "\n",
    "    name=name.replace('_', \" \")\n",
    "    name=name.replace('.', \"_\")\n",
    "    name=name.replace('A/S', \"AS\")\n",
    "    name=name.replace('PS/2', \"PS2\")\n",
    "    name=name.replace(':', \"_\")\n",
    "    \n",
    "\n",
    "    \n",
    "    useless_word = [\"신한카드\",\"현대카드\",\"삼성카드\",\"KB국민카드\",\"KB카드\",\"국민카드\",\"BC카드\",\"우리카드\",\"롯데카드\",\"하나카드\",\"구.하나SK\",\n",
    "                    \"비씨카드\",\"씨티카드\",\n",
    "                    \"방문수령가능\",\"즉시할인쿠폰\",\"빠름배송\",\"노마진\",\"행사\",\"모든구매\",\"전구매\",\"구매\",\"신제품\",\"새제품\",\"제품\",\"신속\",\"정확\",\"출고\",\n",
    "                    \"현대H몰\",\"CJmal\",\"롯데i몰\",\"이마트몰\",\"롯데닷컴\",\"신세계몰\",\"11번가\",\"위메프\",\"GS샵\",\"G마켓\",\"쿠팡\",\"옥션\",\"티몬\",\n",
    "                    \"관부가세\",\"부가세\",\"총알\",\"출고\",\n",
    "                    \"계산서\",\"계산\",\"미포함\",\"포함\",\"상당\",\"응모\",\"불가\",\"한정\",\"수량\",\"무조건\",\"오케이\",\"빠른\",\"추천\",\n",
    "                    \"연중무휴\",\"적립금\",\"할인\",\"해외\", \"즉시\",\"수량\",\"한정\",\"단골\",\"우대\",\"최대\",\"추가\",\"적립\",\"고객\",\n",
    "                    \"발행\",\"견적\", \"세금\",\"단독\", \"특가\", \"구매\", \"대행\",\"선착순\" ,\"사은품\", \"이벤트\", \"증정\", \"직배송\", \n",
    "                    \"배송\",\"발송\",\"착한\",\"가격\", \"쿠폰\", \"정품\", \"1주년\",  \"리뷰안\",\"리뷰\", \"공인\", \"판매점\", \"무료\", \"당일\",\n",
    "                    \"Ⅷ관\",\"VII관\",\"Ⅶ관\",\"III관\",\"Ⅲ관\",\"VI관\",\"IV관\",\"Ⅱ관\",\"Ⅸ관\",\"Ⅰ관\",\"V관\",\n",
    "                    \"주변기기\", \"상품\", \"대리점\", \"최저가\", \"최고가\", \"저가\", \"고가\", \"직구\", \"기존가\"]\n",
    "    special_char = [\"&#39;\",\"&frasl;\",\"&amp;\",\"&gt;\",\"&quot;\",\"col:\",\"ㅁ\",\"ㅇ\",\"ㅣ\",\n",
    "                    ':','@','▶',\"!\",'|','┕','Λ','Ο','Λ','◆','正','本','♥','●','※',\" x \",\" X \",\n",
    "                    '◀','┙','★','☆','*','名','品','大','＋','+',',','■','/','♣','━',\" _\",\n",
    "                    'ㄴ','ㄱ','┏','┓','╋','?','▩','無','有','{','}','[',']','(',')']\n",
    "    \n",
    "    \n",
    "    for word in useless_word :\n",
    "        name=name.replace(word, \"\")\n",
    "    \n",
    "    for word in special_char :\n",
    "        name=name.replace(word, \" \")\n",
    "    \n",
    "    \n",
    "    twitterPosList = twitter.pos(name)\n",
    "    a=[]\n",
    "    for q in twitterPosList:\n",
    "        a.append(q[0])\n",
    "    #q\n",
    "    name+=tagging(a)\n",
    "        \n",
    "    name=name.replace(\"__\",\" \")\n",
    "    name=name.replace(\"-_\",\" \")\n",
    "    name=name.replace(\"&_\",\" \")\n",
    "    name=name.replace(\"=_\",\" \")\n",
    "    name=name.replace(\"$_\",\" \")\n",
    "    name=name.replace(\"^_\",\" \")\n",
    "    name=name.replace(\"#_\",\" \")\n",
    "    name=name.replace(\"\\_\",\" \")\n",
    "    \n",
    "    print(i)\n",
    "\n",
    "    pred = clf.predict(vectorizer.transform([name]))[0]\n",
    "\n",
    "    return jsonify({'cate':cate_id_name_dict[pred]})\n",
    "\n",
    "\n",
    "app.run(host='0.0.0.0', port=8886)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    " * 추후 여기 docker 에서 뭔가 python package 설치할게 있으면 \n",
    " * /opt/conda/bin/pip2 install bottle 이런식으로 설치 가능"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "http://somaeval.hoot.co.kr:8880/eval?url=http://110.35.161.182:8886&mode=all&name=OF30"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  },
  "widgets": {
   "state": {},
   "version": "1.1.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
